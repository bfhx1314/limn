package com.limn.driver;import java.io.*;import java.net.MalformedURLException;import java.net.Socket;import java.net.URL;import java.net.UnknownHostException;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Set;import java.util.concurrent.TimeUnit;import com.google.common.io.Resources;import com.limn.tool.common.*;import org.apache.commons.io.FileUtils;import org.openqa.selenium.By;import org.openqa.selenium.JavascriptExecutor;import org.openqa.selenium.Keys;import org.openqa.selenium.NoSuchElementException;import org.openqa.selenium.NoSuchWindowException;import org.openqa.selenium.OutputType;import org.openqa.selenium.WebElement;import org.openqa.selenium.chrome.ChromeDriver;import org.openqa.selenium.firefox.FirefoxDriver;import org.openqa.selenium.ie.InternetExplorerDriver;import org.openqa.selenium.interactions.Actions;import org.openqa.selenium.remote.DesiredCapabilities;import org.openqa.selenium.remote.RemoteWebDriver;import org.openqa.selenium.support.ui.ExpectedConditions;import org.openqa.selenium.support.ui.Select;import org.openqa.selenium.support.ui.WebDriverWait;import com.limn.driver.common.OperateWindows;import com.limn.driver.exception.SeleniumFindException;import com.limn.tool.parameter.Parameter;import com.limn.tool.regexp.RegExp;import com.limn.tool.variable.Variable;import com.limn.tool.exception.ParameterException;public class Driver{	//js脚本 获取XPATH路径	private String testJS = "";	//驱动	public RemoteWebDriver driver = null;		private  String URL = null;		private  String IP= null;		private  int TYPE = -1;		public  String remotePort = null;		private  DesiredCapabilities browserType = null;		private  int startType = 0;		private  boolean browserFlag = false;		private  boolean isBrowserStart = false;		private  int startBrowserType = 0;		protected  WebElement findWebElement = null;	protected  int hasThread = 0;		private  boolean isRemoteStart = false;	private  int waitTime = 10;	/**	 * @param type 浏览器类型	 * @param url 测试对应的浏览器地址	 * @param ip	 */	public void setDriver(String type, String url, String ip) {				if(type.equalsIgnoreCase("IE")){			TYPE = 3;		}else if(type.equalsIgnoreCase("Chrome")){			TYPE = 2;		}else if(type.equalsIgnoreCase("Firefox")){			TYPE = 1;		}		IP = ip;		URL = url;	}	private void startBrowserInit(){		if( IP!=null && !IP.equals("")){						if(!isRemoteStart){				remoteDriver();			}			switch (TYPE) {			case 1:				browserType	= new DesiredCapabilities().firefox();				break;			case 2:				browserType= new DesiredCapabilities().chrome();				break;			case 3:				break;			default:				System.out.println("不存在的类型");			}//			try {				BaseToolParameter.getPrintThreadLocal().log("远程端口:" + remotePort, 4);				//如果端口为0 是要报错的.				startType = 1;//				driver = new RemoteWebDriver(new URL("http://"+IP + ":" + remotePort +"/wd/hub"), browserType);//			} catch (MalformedURLException e) {//				e.printStackTrace();//			}		}else{			BaseToolParameter.getPrintThreadLocal().log("正在启动浏览器.....请稍等", 1);			closeBrowserDriver();			switch (TYPE) {			case 1:				startType = 2;				System.setProperty("webdriver.gecko.driver", Parameter.DEFAULT_BIN_PATH + "/geckodriver.exe");//				driver = new FirefoxDriver();					break;			case 2:				startType = 3;				CallBat.exec(Parameter.DFAULT_TEST_PATH + "/bin/chromedriver_x86.exe");				System.setProperty("webdriver.chrome.driver", Parameter.DEFAULT_BIN_PATH + "/chromedriver_x86.exe");//				driver = new ChromeDriver();				break;			case 3:				String IEDriver = null;				startType = 4;				if(Parameter.SYSTEMBIT.equals("64")){					IEDriver = "IEDriverServer_x64.exe";					}else{					IEDriver = "IEDriverServer_x86.exe";				}				CallBat.exec(Parameter.DEFAULT_BIN_PATH + "\\" + IEDriver);//				DesiredCapabilities ieCapabilities = DesiredCapabilities.internetExplorer();				browserType = DesiredCapabilities.internetExplorer();				browserType.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, true);//				WebDriver driver = new InternetExplorerDriver(ieCapabilities);				System.setProperty("webdriver.ie.driver", Parameter.DEFAULT_BIN_PATH + "\\" + IEDriver);//				driver = new InternetExplorerDriver(ieCapabilities);				break;			default:				System.out.println("不存在的类型");			}		}		setTestJs();		browserFlag = true;	}		/**	 * 启动浏览器	 * @throws SeleniumFindException 	 */	public void startBrowser() throws SeleniumFindException{		isBrowserStart = true;		if(!browserFlag || startBrowserType!=TYPE){			startBrowserInit();		}		try {			switch (startType) {			case 1:				driver = new RemoteWebDriver(new URL("http://" + IP + ":" + remotePort + "/wd/hub"), browserType);				break;			case 2:				driver = new FirefoxDriver();				break;			case 3:				driver = new ChromeDriver();				break;			case 4:				driver = new InternetExplorerDriver();				break;			default:				BaseToolParameter.getPrintThreadLocal().log("不存在的浏览器类型", 2);				break;			}		} catch (MalformedURLException e) {			throw new SeleniumFindException("启动浏览器失败");//			BaseToolParameter.getPrintThreadLocal().log("启动浏览器失败", 2);//			return;		}		// 异步脚本的超时时间		driver.manage().timeouts().setScriptTimeout(5, TimeUnit.SECONDS);		// 定位对象时超时的时间		driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);		// 页面加载超时时间		driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);				//		maximise(); // 最大化浏览器  使用下面的方法		driver.manage().window().maximize();				driver.get(URL);//		selenium = new WebDriverBackedSelenium(driver, URL);//		//		selenium.setTimeout("7200000");//		selenium.windowFocus();		BaseToolParameter.getPrintThreadLocal().log("浏览器启动成功", 1);		isBrowserStart = true;	}		/**	 * 关闭最后的当前打开的窗。（关闭单个）	 */	public  void closeBrowser(){		isBrowserStart = false;		if(driver!=null){			driver.quit();		}	}		/**	 * 页面跳转	 * @param URL	 * @throws SeleniumFindException	 */	public  void changeURL(String URL) throws SeleniumFindException{		try{			driver.navigate().to(URL);		}catch(Exception e){			throw new SeleniumFindException("浏览器页面跳转失败");		}	}		/**	 * 获取浏览器	 */	public  String getBrowserName(){		String browserName = "";		switch (TYPE){		case 1:			browserName = "firefox";			break;		case 2:			browserName = "chrome";			break;		case 3:			browserName = "iexplore";			break;		default :			BaseToolParameter.getPrintThreadLocal().log("没有此类型的浏览器：" + TYPE, 2);		}		return browserName;	}	/**	 * 运行脚本，将会执行测试脚本以及commd传进来的内容	 * 	 * @param commd 运行内容	 * @throws SeleniumFindException	 */	public Object runScript(String commd) throws SeleniumFindException {		if(!isBrowserStart){			throw new SeleniumFindException("浏览器未启动");		}		return driver.executeScript(testJS + commd);	}			public Object runScript(String commd, Object object) throws SeleniumFindException{		if(!isBrowserStart) {			throw new SeleniumFindException("浏览器未启动");		}		return driver.executeScript(testJS + commd, object);	}	private String getTestJS(){//		String js = "";//		try {//			this.getClass().getResourceAsStream("JavaScript.js");////			System.out.println(FileUtil.getFileText(Resources.getResource("JavaScript.js").getFile()));//			BufferedInputStream bufferedInputStream = (BufferedInputStream) Resources.getResource("JavaScript.js").getContent();//			byte[] bs = new byte[512];//			while (bufferedInputStream.read(bs) != -1) {////				System.out.print(new String(bs));//				js = js + new String(bs);////			}//		}catch (Exception e){////		}		String js = "";		try {			js = FileUtil.getFileText(Resources.getResource("JavaScript.js").getFile());		}catch (Exception e){		}		return js;	}	public static void main(String[] args){		Driver driver = new Driver();		driver.getTestJS();	}	/**	 * 设置元素高亮	 * @param webElement	 * @throws SeleniumFindException	 */	public  void highLightWebElement(WebElement webElement) throws SeleniumFindException {		if(!isBrowserStart){			throw new SeleniumFindException("浏览器未启动");		}		if(null != webElement){			try{				driver.executeScript("arguments[0].style.border = \"2px solid yellow\"", webElement);			}catch(Exception e){				BaseToolParameter.getPrintThreadLocal().log("设置高亮失败", 3);			}		}	}		/**	 * 取消元素高亮	 * @param webElement	 * @throws SeleniumFindException	 */	public  void cancelHighLightWebElement(WebElement webElement) throws SeleniumFindException {		if(!isBrowserStart){			throw new SeleniumFindException("浏览器未启动");		}		try{			driver.executeScript("arguments[0].style.border = \"\"", webElement);		}catch(Exception e){			BaseToolParameter.getPrintThreadLocal().log("取消高亮失败", 3);//			throw new SeleniumFindException("取消高亮失败");		}	}	/**	 * 对于文件内容	 * 	 * @return 文件内容	 * @throws IOException	 */	private  String getTestJavaScript() throws IOException {		InputStream is = Driver.class.getResourceAsStream("JavaScript.js"); 		byte[] buf = new byte[1024];		ByteArrayOutputStream baos = new ByteArrayOutputStream();		int len;		while ((len = is.read(buf)) != -1) {			baos.write(buf, 0, len);		}		is.close();		return baos.toString();	}	/**	 * 返回元素	 * @param locator	 * @return 返回元素	 * @throws SeleniumFindException	 */	public  WebElement getWebElement(By locator) throws SeleniumFindException{		WebElement web = isExist(null,locator);				if(null == web){			throw new SeleniumFindException("无法定位元素xpath:" + locator.toString());		}else{			return web;		}	}		/**	 * 返回元素	 * @param locator	 * @param web	 * @return 返回元素	 * @throws SeleniumFindException	 */	public  WebElement getWebElement(WebElement web, By locator) throws SeleniumFindException{		WebElement webRes = isExist(web,locator);		if(null == webRes){			throw new SeleniumFindException("无法定位元素xpath:" + locator.toString());		}else{			return webRes;		}	}	public  List<WebElement> getWebElements(WebElement web, By locator) throws SeleniumFindException {		return web.findElements(locator);	}		/**	 * 返回元素	 * @param xpath	 * @return	 * @throws SeleniumFindException 元素没有定位	 */	public  WebElement getWebElementByXPath(String xpath) throws SeleniumFindException{		WebElement web = isExistByXPath(xpath);		if(null == web){			throw new SeleniumFindException("无法定位元素xpath:" + xpath);		}else{			return web;		}	}	public String screenshot(String bitMapPath) {		File scrFile = driver.getScreenshotAs(OutputType.FILE);		try {			FileUtils.copyFile(scrFile, new File(bitMapPath));			BaseToolParameter.getPrintThreadLocal().debugLog("save snapshot path is:" + bitMapPath, 1);		} catch (IOException e) {			BaseToolParameter.getPrintThreadLocal().log("save snapshot error! path is:" + bitMapPath, 2);		}		return bitMapPath;	}			/**	 * 返回元素	 * @param xpath	 * @return	 * @throws SeleniumFindException 元素没有定位	 */	public  List<WebElement> getWebElementsByXPath(String xpath) throws SeleniumFindException{		if(!isBrowserStart){			throw new SeleniumFindException("浏览器未启动");		}		return driver.findElementsByXPath(xpath);	}		/**	 * 获取WebElement的值	 * @param webE WebElement对象	 * @return	 */	public  String getWebElementVaule(WebElement webE){		String value = null;		if (null != webE){			if(webE.getTagName().equalsIgnoreCase("input") && webE.getTagName().equalsIgnoreCase("textarea")){				value = webE.getAttribute("value");			}else if(webE.getTagName().equalsIgnoreCase("table")){							}else{				value = webE.getText();			}		}		return value;	}		/**	 * 根据定位设置元素value	 * @param locator	 * @param value	 * @throws SeleniumFindException	 */	private  void setText(By locator, String value) throws SeleniumFindException{		WebElement webE = driver.findElement(locator);		setText(webE,value);//		if(!isBrowserStart){//			throw new SeleniumFindException("浏览器未启动");//		}//		if(isWebElementExist(locator) && driver.findElement(locator).isEnabled()){//			driver.findElement(locator).clear();//			driver.findElement(locator).sendKeys(value);//		}else{//			BaseToolParameter.getPrintThreadLocal().log("没有定位到元素或者元素未启用:" + locator.toString(), 3);//			throw new SeleniumFindException("没有定位到元素或者元素未启用" +  locator.toString());//		}	}		/**	 * 设置元素的value	 * @param web	 * @param value	 * @throws SeleniumFindException	 */	private  void setText(WebElement web, String value) throws SeleniumFindException{		if(!isBrowserStart){			throw new SeleniumFindException("浏览器未启动");		}		if(null != web && web.isEnabled()){			String webType = web.getAttribute("type");			if (!webType.equals("file")){				web.clear();			}			web.sendKeys(value);			//			if (web.getAttribute("value").equals("")){//				String webId = web.getAttribute("id");//				if (!webId.equals("")){//					runScript("document.getElementById('"+webId+"').value='"+value+"'");//				}else{//					throw new SeleniumFindException("改控件无法录入，sendKeys失效，并且没有ID。待处理");//				}//			}		}else{			BaseToolParameter.getPrintThreadLocal().log("元素为null或者元素未启用", 3);			throw new SeleniumFindException("元素为null或者元素未启用");		}	}				public  void setWaitTime(int waitTimeSeconds){		waitTime =waitTimeSeconds; 	}		/**	 * 判断元素是否存在	 * @param selector 元素的定位By.	 * @return	 * @throws SeleniumFindException 	 */	public  boolean isWebElementExist(By selector) throws SeleniumFindException{		if(null==isExist(null,selector)){			return false;		}else{			return true;		}	}		/**	 * 判断元素是否存在	 * @param xpath 元素的定位By.	 * @return	 * @throws SeleniumFindException 	 */	public  boolean isWebElementExist(String xpath) throws SeleniumFindException{		if(null==isExistByXPath(xpath)){			return false;		}else{			return true;		}	}	/**	 * 判断元素是否存在	 * @param selector	 * @return 存在返回,不存在返回null	 * @throws SeleniumFindException 	 */	private  WebElement isExist(WebElement web, By selector) throws SeleniumFindException{		if(!isBrowserStart){			throw new SeleniumFindException("浏览器未启动");		}		if(null == web){			try {//				return new WebDriverWait(driver, waitTime).until(ExpectedConditions.presenceOfElementLocated(selector));				return driver.findElement(selector);			} catch (NoSuchElementException e) {				return null;			} catch (NoSuchWindowException e2){				throw new SeleniumFindException("浏览器界面关闭");			} catch (Exception e1){								return null;			}		}else{			try {				return web.findElement(selector);			} catch (NoSuchWindowException e2){				throw new SeleniumFindException("浏览器界面关闭");			} catch (Exception e1){				return null;			}		}	}		/**	 * 判断元素是否存在	 * @param xpath	 * @return 存在返回,不存在返回null	 * @throws SeleniumFindException 	 */	private  WebElement isExistByXPath(String xpath) throws SeleniumFindException{		if(!isBrowserStart){			throw new SeleniumFindException("浏览器未启动");		}				try {//			return new WebDriverWait(driver, waitTime).until(ExpectedConditions.presenceOfElementLocated(By.xpath(xpath)));			return driver.findElementByXPath(xpath);		} catch (NoSuchElementException e) {			return null;		} catch (NoSuchWindowException e2){			throw new SeleniumFindException("浏览器界面关闭");		} catch (Exception e1){						return null;		}	}			/**	 * 等到元素出现	 * @param selector 元素的定位By.	 * @param timeOut int 等待的时间(单位为秒)	 * @throws SeleniumFindException 	 */	public  boolean waitForElementPresent(By selector, int timeOut) throws SeleniumFindException {		timeOut = timeOut * 5;		while(timeOut > 0) {			timeOut--;			if (isWebElementExist(selector)) {				return true;			} else {				Common.wait(200);			}		}		return false;	}				/**	 * 获取当前URL	 * @return	 * @throws SeleniumFindException	 */	public  String getCurrentURL() throws SeleniumFindException{		if(!isBrowserStart){			BaseToolParameter.getPrintThreadLocal().log("浏览器未启动", 2);			throw new SeleniumFindException("浏览器未启动");		}		return driver.getCurrentUrl();	}		/**	 * 关闭所有浏览器驱动	 */	public  void closeBrowserDriver(){		CallBat.closeProcess("chromedriver_x86.exe");		CallBat.closeProcess("IEDriverServer_x64.exe");		CallBat.closeProcess("IEDriverServer_x86.exe");	}			/**	 * 重新启动远程连接	 */	private  void remoteDriver(){		CallBat.closeProcessByTitle("ServerHub");		CallBat.returnExecByNewWindows("ServerHub" ," java -jar "+ Parameter.DEFAULT_BIN_PATH +"\\selenium-server-standalone.jar -role hub");		BaseToolParameter.getPrintThreadLocal().log("正在启动本地电脑Hub.....请稍等", 1);		Common.wait(3000);		new Thread(new RemoteConnect(IP)).start();		BaseToolParameter.getPrintThreadLocal().log("正在启动远程电脑Node.....请稍等", 1);		Common.wait(3000);		isRemoteStart = true;	}			/**	 * 获取元素根据定位器 可以是ID,name,xpath	 * @param locator	 * @return	 */	public  WebElement getWebElementBylocator(String locator){		WebElement web = null;		if (RegExp.findCharacters(locator, "^/")) {						String xpath = locator;						try {				web = getWebElementByXPath(xpath);			} catch (SeleniumFindException e) {			}			findWebElement = web;		} else {			findWebElement = null;			new Thread(new FindWebElements(By.id(locator),this)).start();			new Thread(new FindWebElements(By.name(locator),this)).start();			hasThread = 2;			while(true){				if(null!=findWebElement){					break;				}				if(hasThread==0){					BaseToolParameter.getPrintThreadLocal().log("未定位WebElement locator:" + locator, 2);					break;					}								Common.wait(500);			}		}		return findWebElement;	}		/**	 * 根据界面显示值录入	 * @param web	 * @param value	 * @throws SeleniumFindException	 */	public  void setSelectByVisibleText(WebElement web, String value) throws SeleniumFindException{		Select select = new Select(web);		BaseToolParameter.getPrintThreadLocal().log("list 选项:" + value, 0);		try{			select.selectByVisibleText(value);		}catch(Exception e){			throw new SeleniumFindException(e.getMessage());		}	}		/**	 * 根据界面索引录入	 * @param web	 * @param index	 * @throws SeleniumFindException	 */	public  void setSelectByIndex(WebElement web, int index) throws SeleniumFindException{		Select select = new Select(web);		BaseToolParameter.getPrintThreadLocal().log("list index:" + index, 0);		try{			select.selectByIndex(index);		}catch(Exception e){			throw new SeleniumFindException(e.getMessage());		}	}		/**	 * 根据list value录入	 * @param web	 * @param value	 * @throws SeleniumFindException	 */	public  void setSelectByValue(WebElement web, String value) throws SeleniumFindException{		Select select = new Select(web);		BaseToolParameter.getPrintThreadLocal().log("list value:" + value, 0);		try{			select.selectByValue(value);		}catch(Exception e){			throw new SeleniumFindException(e.getMessage());		}	}		/**	 * 自由判断录入类型与事件	 * @param eby By 	 * @param value 值或者事件	 * @throws SeleniumFindException	 */	public  void setValue(By eby, String value) throws SeleniumFindException{		// 录入前先获取变量值		if (RegExp.findCharacters(value, "\\{.*\\}")){			String var = RegExp.filterString(value, "{}");			value = Variable.getExpressionValue(var);		}		WebElement web = driver.findElement(eby);		if(web == null){			BaseToolParameter.getPrintThreadLocal().log("定位失败", 2);			throw new SeleniumFindException("定位失败");		}else{			setValue(web,value);		}	}	/**	 * 自由判断录入类型与事件	 * @param locator 定位器	 * @param value 值或者事件	 * @throws SeleniumFindException	 */	public  void setValue(String locator, String value) throws SeleniumFindException{		// 录入前先获取变量值		if (RegExp.findCharacters(value, "\\{.*\\}")){			String var = RegExp.filterString(value, "{}");			value = Variable.getExpressionValue(var);		}		locator = Variable.resolve(locator);		WebElement web = getWebElementBylocator(locator);		if(web == null){			BaseToolParameter.getPrintThreadLocal().log("定位失败locator:" + locator, 2);			throw new SeleniumFindException("定位失败locator:" + locator);		}else{			setValue(web,value);		}	}	/**	 * 自由判断录入类型与事件	 * @param webE WebElement对象	 * @param value 值或者事件	 * @throws SeleniumFindException	 */	public  void setValue(WebElement webE, String value) throws SeleniumFindException{		// 录入前先获取变量值		if (RegExp.findCharacters(value, "\\{.*\\}")){			String var = RegExp.filterString(value, "{}");			value = Variable.getExpressionValue(var);		}		WebElement web = webE;		if(web == null){			BaseToolParameter.getPrintThreadLocal().log("定位失败WebElement", 2);			throw new SeleniumFindException("定位失败WebElement");		}		if(RegExp.findCharacters(value, "\\[.*?\\]")){			event(web,value.toUpperCase());			return;		}		String inputValue = null;		try {			try{				int inT = Integer.parseInt(value);				inputValue = null;			}catch(Exception e){				inputValue = Common.getExpressionValue(value);			}			value = inputValue == null ? value : inputValue;					} catch (ParameterException e) {						throw new SeleniumFindException("语法解析失败，表达式：" + value);					}						if(web.getTagName().equalsIgnoreCase("select")){			setSelectByVisibleText(web,value);		}else{			setText(web, value);		}	}	/**	 * 触发事件	 * @param web	 * @param event EventType	 * @throws SeleniumFindException 	 */	public  void event(WebElement web,String event) throws SeleniumFindException{				switch(event){		case EventType.CLICK:			web.click();			break;					default:			BaseToolParameter.getPrintThreadLocal().log("无法识别的事件:" + event, 2);			throw new SeleniumFindException("无法识别的事件:" + event);		}	}		/**	 * 键盘事件	 * @param event	 */	public void keyBoardEvent(String event){		Actions action = new Actions(driver);		switch(event.toUpperCase()){		case "ENTER":			action.sendKeys(Keys.ENTER).perform();			break;		case "DOWN":			action.sendKeys(Keys.DOWN).perform();			break;		case "UP":			action.sendKeys(Keys.UP).perform();			break;		case "ESC":			action.sendKeys(Keys.ESCAPE).perform();			break;		case "TAB":			action.sendKeys(Keys.TAB).perform();			break;		default:			action.sendKeys(event).perform();			break;		}			}		/**	 * 根据Web元素返回xpath	 * @param web	 * @return	 * @throws SeleniumFindException	 */	public String getXpathByWebElement(WebElement web) throws SeleniumFindException{		if(!isBrowserStart){			throw new SeleniumFindException("浏览器未启动");		}		String locator = null;		try{			locator = String.valueOf(runScript("return getLocatorByNode(arguments[0])", web));		}catch(Exception e){			throw new SeleniumFindException("未能定位元素的XPATH");		}		return locator;	}		/**	 * Driver切换到新弹出的浏览器	 * @throws SeleniumFindException 	 */	public  void switchToNewBrowser() throws SeleniumFindException{		OperateWindows operateWindows = new OperateWindows();		operateWindows.getNewBrowsers();		operateWindows.switchNewBrowser();	}		/**	 * Driver切回第一个浏览器	 * @throws SeleniumFindException 	 */	public  void switchToDefaultBrowser() throws SeleniumFindException{		OperateWindows operateWindows = new OperateWindows();		operateWindows.getNewBrowsers();		operateWindows.switchToDefaultBrowser();	}		/**	 * 根据index切换frame	 * @param i  frame index	 * @throws SeleniumFindException 	 */	public  void swichToFrame(int i) throws SeleniumFindException{		try{//			driver.switchTo().frame(i);			driver.switchTo().frame(1);		}catch(Exception e){			throw new SeleniumFindException("切换frame失败。");		}	}	/**	 * 根据name切换frame	 * @param name frame的name属性	 * @throws SeleniumFindException 	 */	public  void swichToFrame(String name) throws SeleniumFindException{		try{			driver.switchTo().frame(name);		}catch(Exception e){			throw new SeleniumFindException("切换frame失败。");		}	}		/**	 * 根据WebEelement对象切换frame	 * @param webE frame的WebEelement对象	 * @throws SeleniumFindException 	 */	public  void swichToFrame(WebElement webE) throws SeleniumFindException{		try{			driver.switchTo().frame(webE);		}catch(Exception e){			throw new SeleniumFindException("切换frame失败。");		}	}	/**	 * 切回初始frame	 * @throws SeleniumFindException 	 */	public  void swichToDefaultFrame() throws SeleniumFindException{		try{			driver.switchTo().defaultContent();		}catch(Exception e){			throw new SeleniumFindException("切换frame失败。");		}	}	/**	 * 设置测试脚本	 */	private void setTestJs() {			testJS = getTestJS();	}		/**	 * 对于文件内容	 * 	 * @param path 文件路径	 * @return 文件内容	 * @throws IOException	 */	private  String getTestJavaScript(String path) throws IOException {		File file = new File(path);		if (!file.exists() || file.isDirectory())			throw new FileNotFoundException();		FileInputStream fis = new FileInputStream(file);		byte[] buf = new byte[1024];		ByteArrayOutputStream baos = new ByteArrayOutputStream();		int len;		while ((len = fis.read(buf)) != -1) {			baos.write(buf, 0, len);		}		// System.out.println(baos.toString());		fis.close();		return baos.toString();	}		class RemoteConnect implements Runnable{		private Socket sc = null;		private DataInputStream dis = null;		private boolean flag = true;		public RemoteConnect(String IP){			try {				sc = new Socket(IP,Parameter.REMOTEPORT);				dis = new DataInputStream(sc.getInputStream());				remotePort = dis.readUTF();			} catch (UnknownHostException e) {				e.printStackTrace();			} catch (IOException e) {				e.printStackTrace();			}		}				@Override		public void run() {			//确认在线			while(flag){				try {					sc.sendUrgentData(0xFF);					Thread.sleep(10000);				} catch (InterruptedException e) {					e.printStackTrace();				} catch (IOException e) {					flag = false;				}			}		}	}	class FindWebElements implements Runnable{				private By locator = null;		private Driver driver = null;		public FindWebElements(By locator,Driver driver){			this.locator = locator;			this.driver = driver;		}				@Override		public void run() {			try {				WebElement web = getWebElement(locator);				if (null != web) {					findWebElement = web;				}			} catch (SeleniumFindException e) {							} finally {				hasThread--;			}		}	}}